generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survey {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      SurveyStatus @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  batches     Batch[]
  responses   Response[]
}

model Question {
  id         String   @id @default(cuid())
  surveyId   String
  survey     Survey   @relation(fields: [surveyId], references: [id])
  type       QuestionType
  prompt     String
  required   Boolean  @default(true)
  order      Int
  optionsJson Json?
}

model Batch {
  id          String   @id @default(cuid())
  surveyId    String
  survey      Survey   @relation(fields: [surveyId], references: [id])
  size        Int
  merkleRoot  String
  createdAt   DateTime @default(now())
  tokens      Token[]
}

model Token {
  id         String   @id @default(cuid())
  batchId    String
  batch      Batch    @relation(fields: [batchId], references: [id])
  tokenHash  String   @unique
  position   Int
  proofJson  Json
  consumedAt DateTime?
  revoked    Boolean  @default(false)
  @@index([batchId, position])
  @@index([tokenHash])
}

model Response {
  id                 String    @id @default(cuid())
  surveyId           String
  survey             Survey    @relation(fields: [surveyId], references: [id])
  tokenHash          String
  submittedAtBucket  DateTime  // timestamp quantizado
  answers            Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  responseId String
  response   Response @relation(fields: [responseId], references: [id])
  questionId String
  valueJson  Json
}

model AuditLog {
  id         String   @id @default(cuid())
  type       String
  payloadJson Json
  signature  String?
  createdAt  DateTime @default(now())
}

enum SurveyStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT
}
